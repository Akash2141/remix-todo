{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/login.tsx\");\n  import.meta.hot.lastModified = \"1694528508914.3462\";\n}\n// REMIX HMR END\n\nimport { redirect } from \"@remix-run/node\";\nimport { Form, Link } from \"@remix-run/react\";\nimport { db } from \"~/utils/db.server\";\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const user = await db.user.findFirst({\n    where: {\n      email,\n      password\n    }\n  });\n  if (!user) return {\n    status: 'Failed',\n    reponse: 'Invalid Credentials'\n  };\n  return redirect(\"/\");\n}\nexport default function Login() {\n  return <div>\n        <h1 className=\"text-center\">Login</h1><br />\n        <Form method=\"POST\">\n          <label htmlFor='email'>Email: </label>\n          <input type='email' name='email' id=\"email\" placeholder=\"<EMAIL>\" /><br /><br />\n          <label htmlFor='password'>Password:</label>\n          <input type=\"password\" name=\"password\" id=\"password\" /><br /><br />\n          <button className=\"btn btn-primary\" type=\"submit\">Submit</button>&nbsp;&nbsp;\n          <button type=\"button\"> <Link to=\"/signin\">Sign Up!</Link></button>\n        </Form>\n      </div>;\n}\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAoBA,kBAAyB;AAEzB,gBAAmB;AAqBX;AA1CR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2BAA6B,EAAE;AAAA,EACxE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsB;AACtB,cAAY,IAAI,eAAe;AACjC;AAwBe,SAAR,QAAyB;AAC9B,SAAO,mDAAC,SACF;AAAA,uDAAC,QAAG,WAAU,eAAc,qBAA5B;AAAA;AAAA;AAAA;AAAA,WAAiC;AAAA,IAAK,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IAC1C,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,WAAM,SAAQ,SAAQ,uBAAvB;AAAA;AAAA;AAAA;AAAA,aAA8B;AAAA,MAC9B,mDAAC,WAAM,MAAK,SAAQ,MAAK,SAAQ,IAAG,SAAQ,aAAY,aAAxD;AAAA;AAAA;AAAA;AAAA,aAAkE;AAAA,MAAE,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MAAE,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MAC9E,mDAAC,WAAM,SAAQ,YAAW,yBAA1B;AAAA;AAAA;AAAA;AAAA,aAAmC;AAAA,MACnC,mDAAC,WAAM,MAAK,YAAW,MAAK,YAAW,IAAG,cAA1C;AAAA;AAAA;AAAA;AAAA,aAAqD;AAAA,MAAE,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MAAE,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACjE,mDAAC,YAAO,WAAU,mBAAkB,MAAK,UAAS,sBAAlD;AAAA;AAAA;AAAA;AAAA,aAAwD;AAAA,MAAS;AAAA,MACjE,mDAAC,YAAO,MAAK,UAAS;AAAA;AAAA,QAAC,mDAAC,QAAK,IAAG,WAAU,wBAAnB;AAAA;AAAA;AAAA;AAAA,eAA2B;AAAA,WAAlD;AAAA;AAAA;AAAA;AAAA,aAAyD;AAAA,SAN3D;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OATC;AAAA;AAAA;AAAA;AAAA,SAUH;AACN;AACA,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
